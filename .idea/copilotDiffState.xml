<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# Project Setup (Gamification Platform) Ejada&#10;&#10;This project uses Docker Compose to orchestrate multiple services:&#10;&#10;## Services &amp; Ports&#10;&#10;| Service     | Description                | Port(s)         |&#10;|-------------|----------------------------|-----------------|&#10;| Backend     | Spring Boot API            | 8080            |&#10;| RabbitMQ    | Message broker (management)| 5672, 15672     |&#10;| Frontend    | React app (via Nginx)      | 3000            |&#10;| Swagger     | API documentation (Backend)| 8080/swagger-ui |&#10;&#10;## Accessing Services&#10;&#10;- **Backend API:**&#10;  - http://localhost:8080&#10;- **Swagger UI:**&#10;  - http://localhost:8080/swagger-ui&#10;- **RabbitMQ Management:**&#10;  - http://localhost:15672 (default user/pass: guest/guest)&#10;- **Frontend:**&#10;  - http://localhost:3000&#10;&#10;## Usage&#10;&#10;1. Start all services:&#10;   ```sh&#10;   docker-compose up --build&#10;   ```&#10;2. Access the services using the URLs above.&#10;&#10;## Notes&#10;- Ensure Docker is installed and running.&#10;- The backend connects to RabbitMQ and PostgreSQL (if configured).&#10;- Swagger UI is available if enabled in the backend Spring Boot configuration.&#10;&#10;" />
              <option name="updatedContent" value="# Project Setup (Gamification Platform) Ejada&#10;&#10;![Gamification Platform](gamification.png)&#10;&#10;This project uses Docker Compose to orchestrate multiple services:&#10;&#10;## Services &amp; Ports&#10;&#10;| Service     | Description                | Port(s)         |&#10;|-------------|----------------------------|-----------------|&#10;| Backend     | Spring Boot API            | 8080            |&#10;| RabbitMQ    | Message broker (management)| 5672, 15672     |&#10;| Frontend    | React app (via Nginx)      | 3000            |&#10;| Swagger     | API documentation (Backend)| 8080/swagger-ui |&#10;&#10;## Accessing Services&#10;&#10;- **Backend API:**&#10;  - http://localhost:8080&#10;- **Swagger UI:**&#10;  - http://localhost:8080/swagger-ui&#10;- **RabbitMQ Management:**&#10;  - http://localhost:15672 (default user/pass: guest/guest)&#10;- **Frontend:**&#10;  - http://localhost:3000&#10;&#10;## Usage&#10;&#10;1. Start all services:&#10;   ```sh&#10;   docker-compose up --build&#10;   ```&#10;2. Access the services using the URLs above.&#10;&#10;## Notes&#10;- Ensure Docker is installed and running.&#10;- The backend connects to RabbitMQ and PostgreSQL (if configured).&#10;- Swagger UI is available if enabled in the backend Spring Boot configuration." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker-compose.yml" />
              <option name="originalContent" value="version: '3.8'&#10;&#10;services:&#10;  backend:&#10;    build: ./backend&#10;    container_name: spring-backend&#10;    ports:&#10;      - &quot;8080:8080&quot;&#10;    environment:&#10;      - SPRING_PROFILES_ACTIVE=docker&#10;    depends_on:&#10;      - db&#10;    networks:&#10;      - app-network&#10;&#10;  frontend:&#10;    build: ./frontend&#10;    container_name: react-frontend&#10;    ports:&#10;      - &quot;3000:80&quot;  # Nginx exposes on 80&#10;    depends_on:&#10;      - backend&#10;    networks:&#10;      - app-network&#10;&#10;  db:  # Optional PostgreSQL&#10;    image: postgres:15-alpine&#10;    container_name: postgres-db&#10;    environment:&#10;      POSTGRES_USER: admin&#10;      POSTGRES_PASSWORD: secret&#10;      POSTGRES_DB: gamification_db&#10;    volumes:&#10;      - pgdata:/var/lib/postgresql/data&#10;    networks:&#10;      - app-network&#10;&#10;volumes:&#10;  pgdata:&#10;&#10;networks:&#10;  app-network:&#10;    driver: bridge" />
              <option name="updatedContent" value="version: '3.8'&#10;&#10;services:&#10;  backend:&#10;    build: ./backend&#10;    container_name: spring-backend&#10;    ports:&#10;      - &quot;8080:8080&quot;&#10;    environment:&#10;      - SPRING_PROFILES_ACTIVE=docker&#10;    depends_on:&#10;      - db&#10;      - rabbitmq&#10;    networks:&#10;      - app-network&#10;&#10;  frontend:&#10;    build: ./frontend&#10;    container_name: react-frontend&#10;    ports:&#10;      - &quot;3000:80&quot;  # Nginx exposes on 80&#10;    depends_on:&#10;      - backend&#10;    networks:&#10;      - app-network&#10;&#10;  db:  # Optional PostgreSQL&#10;    image: postgres:15-alpine&#10;    container_name: postgres-db&#10;    environment:&#10;      POSTGRES_USER: admin&#10;      POSTGRES_PASSWORD: secret&#10;      POSTGRES_DB: gamification_db&#10;    volumes:&#10;      - pgdata:/var/lib/postgresql/data&#10;    networks:&#10;      - app-network&#10;&#10;  rabbitmq:&#10;    image: rabbitmq:3-management&#10;    container_name: rabbitmq&#10;    ports:&#10;      - &quot;5672:5672&quot;&#10;      - &quot;15672:15672&quot;&#10;    networks:&#10;      - app-network&#10;&#10;volumes:&#10;  pgdata:&#10;&#10;networks:&#10;  app-network:&#10;    driver: bridge" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>